{"ast":null,"code":"import { appStorageName } from '../../globals/globals';\nimport { createSlice } from '@reduxjs/toolkit';\n\nfunction getFavs() {\n  let favsFromStorage = localStorage.getItem(appStorageName);\n\n  if (favsFromStorage === null) {\n    favsFromStorage = [];\n  } else {\n    favsFromStorage = JSON.parse(favsFromStorage);\n  }\n\n  return favsFromStorage;\n}\n\nconst initialState = {\n  items: getFavs()\n};\n\nfunction getIndex(item, arr) {\n  return arr.findIndex(arrItem => arrItem.id === item.id);\n}\n\nexport const favsSlice = createSlice({\n  name: 'favs',\n  initialState,\n  reducers: {\n    addFav: (state, action) => {\n      const newFavs = [...state.items, action.payload];\n      localStorage.setItem(appStorageName, JSON.stringify(newFavs)); // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n\n      state.items = newFavs;\n    },\n    deleteFav: (state, action) => {\n      const itemsCopy = state.items;\n      itemsCopy.splice(getIndex(action.payload, state.items), 1);\n      localStorage.setItem(appStorageName, JSON.stringify(itemsCopy)); // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n\n      state.items = itemsCopy;\n    }\n  }\n});\nexport default favsSlice.reducer;","map":{"version":3,"sources":["/Users/alicelu/Desktop/PROJECTS/moogle/src/utilities/favsSlice.js"],"names":["appStorageName","createSlice","getFavs","favsFromStorage","localStorage","getItem","JSON","parse","initialState","items","getIndex","item","arr","findIndex","arrItem","id","favsSlice","name","reducers","addFav","state","action","newFavs","payload","setItem","stringify","deleteFav","itemsCopy","splice","reducer"],"mappings":"AAAA,SAASA,cAAT,QAA+B,uBAA/B;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,SAASC,OAAT,GAAmB;AACf,MAAIC,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqBL,cAArB,CAAtB;;AACA,MAAGG,eAAe,KAAK,IAAvB,EAA6B;AACzBA,IAAAA,eAAe,GAAG,EAAlB;AACH,GAFD,MAEM;AACFA,IAAAA,eAAe,GAAGG,IAAI,CAACC,KAAL,CAAWJ,eAAX,CAAlB;AACH;;AACD,SAAOA,eAAP;AACH;;AAED,MAAMK,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAEP,OAAO;AADG,CAArB;;AAIA,SAASQ,QAAT,CAAkBC,IAAlB,EAAwBC,GAAxB,EAA6B;AACzB,SAAOA,GAAG,CAACC,SAAJ,CAAcC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeJ,IAAI,CAACI,EAA7C,CAAP;AACH;;AAED,OAAO,MAAMC,SAAS,GAAGf,WAAW,CAAC;AACjCgB,EAAAA,IAAI,EAAE,MAD2B;AAEjCT,EAAAA,YAFiC;AAGjCU,EAAAA,QAAQ,EAAE;AACNC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvB,YAAMC,OAAO,GAAG,CAAC,GAAGF,KAAK,CAACX,KAAV,EAAiBY,MAAM,CAACE,OAAxB,CAAhB;AACAnB,MAAAA,YAAY,CAACoB,OAAb,CAAqBxB,cAArB,EAAqCM,IAAI,CAACmB,SAAL,CAAeH,OAAf,CAArC,EAFuB,CAGvB;AACA;AACA;AACA;;AACAF,MAAAA,KAAK,CAACX,KAAN,GAAca,OAAd;AACH,KATK;AAUNI,IAAAA,SAAS,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMM,SAAS,GAAGP,KAAK,CAACX,KAAxB;AACAkB,MAAAA,SAAS,CAACC,MAAV,CAAiBlB,QAAQ,CAACW,MAAM,CAACE,OAAR,EAAiBH,KAAK,CAACX,KAAvB,CAAzB,EAAwD,CAAxD;AACAL,MAAAA,YAAY,CAACoB,OAAb,CAAqBxB,cAArB,EAAqCM,IAAI,CAACmB,SAAL,CAAeE,SAAf,CAArC,EAH0B,CAI1B;AACA;AACA;AACA;;AACAP,MAAAA,KAAK,CAACX,KAAN,GAAckB,SAAd;AACH;AAnBK;AAHuB,CAAD,CAA7B;AA0BP,eAAeX,SAAS,CAACa,OAAzB","sourcesContent":["import { appStorageName } from '../../globals/globals';\nimport { createSlice } from '@reduxjs/toolkit';\n\nfunction getFavs() {\n    let favsFromStorage = localStorage.getItem(appStorageName);\n    if(favsFromStorage === null) {\n        favsFromStorage = [];\n    }else {\n        favsFromStorage = JSON.parse(favsFromStorage);\n    }\n    return favsFromStorage;\n}\n\nconst initialState = {\n    items: getFavs()\n}\n\nfunction getIndex(item, arr) {\n    return arr.findIndex(arrItem => arrItem.id === item.id);\n}\n\nexport const favsSlice = createSlice({\n    name: 'favs',\n    initialState,\n    reducers: {\n        addFav: (state, action) => {\n            const newFavs = [...state.items, action.payload];\n            localStorage.setItem(appStorageName, JSON.stringify(newFavs));\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.items = newFavs;\n        },\n        deleteFav: (state, action) => {\n            const itemsCopy = state.items;\n            itemsCopy.splice(getIndex(action.payload, state.items), 1);\n            localStorage.setItem(appStorageName, JSON.stringify(itemsCopy));\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.items = itemsCopy;\n        }\n    },\n});\n\nexport default favsSlice.reducer;"]},"metadata":{},"sourceType":"module"}